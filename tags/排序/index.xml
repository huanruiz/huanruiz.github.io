<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>排序 on PunchCode</title>
    <link>https://huanruiz.github.io/tags/%E6%8E%92%E5%BA%8F/</link>
    <description>Recent content in 排序 on PunchCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 12 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://huanruiz.github.io/tags/%E6%8E%92%E5%BA%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>排序算法</title>
      <link>https://huanruiz.github.io/post/datastructure_algorithm/2_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://huanruiz.github.io/post/datastructure_algorithm/2_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>总结几大排序算法. 主要对比时间复杂度和空间复杂度. 下图是排序算法属性的总结. (表格中希尔排序的部分存疑) 算法 平均时间复杂度 最坏情况 空间复杂度 排序方式 稳定性 冒泡排序 $O(n^{2})$ $O(n^{2})$ $O(1)$ 内部 稳定 选择排序 $O(n^{2})$ $O(n^{2})$ $O(1)$ 内部 不稳定 插入排序 $O(n^{2})$ $O(n^{2})$ $O(1)$ 内部 稳定 希尔排序 $O(nlogn)$ $O(nlog^{2}n)$ $O(1)$ 内部 不稳定 快速排序 $O(nlogn)$ $O(n^{2})$ $O(nlogn)$ 内部 不稳定 归并排序 $O(nlogn)$</description>
    </item>
    
    <item>
      <title>Java如何自定义排序</title>
      <link>https://huanruiz.github.io/post/java/1_Java%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://huanruiz.github.io/post/java/1_Java%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</guid>
      <description>Comparable接口 自定义的类自定义排序需要implementsComparable并且重写public int compareTo(Object o) String等包装类实现了Comparable接口, 重写了compareTo(obj)方法, 实现升序排列 compareTo(obj): 当前对象this大于形参对象obj, 返回正整数. 小于返回负整</description>
    </item>
    
  </channel>
</rss>
